generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ChatType {
  user
  group
  channel
  bot
}

model User {
  id       String  @id @default(uuid())
  username String? @unique
  email    String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  isDeleted Boolean @default(false) @map("is_deleted")
  isBot     Boolean @default(false) @map("is_bot")

  lastActivaty DateTime @default(now())

  ownedGroupChats      GroupChat[]
  ownedChannelChats    ChannelChat[]
  userChat1            UserChat[]            @relation("UserChat1")
  userChat2            UserChat[]            @relation("UserChat2")
  sentChannelMessages  MessageChannel[]
  sentGroupMessages    MessageGroup[]
  sentUserMessages     MessageUserChat[]
  botDetails           BotDetails[]          @relation("BotOwner")
  botParents           BotDetails[]          @relation("BotParent")
  botSubscriptions     BotSubscription[]
  channelSubscriptions ChannelSubscription[]
  groupSubscriptions   GroupSubscription[]
  Profile              Profile[]

  @@index([username])
  @@index([createdAt])
  @@index([isBot])
  @@map("users")
}

model Profile {
  id         String  @id @default(uuid())
  firstName  String? @map("first_name")
  lastName   String? @map("last_name")
  bio        String?
  //  http://safira.uz
  publicUrl  String? @map("public_url") //  baseUrl/user-chats/create/:userId
  privateUrl String? @map("private_url") // baseUrl/users/private/:userId

  userId String
  user   User   @relation(fields: [userId], references: [id])
  avatar String

  @@map("profile")
}

model GroupChat {
  id                 String   @id @default(uuid())
  ownerId            String   @map("owner_id")
  type               ChatType @default(group)
  title              String?
  description        String?
  publicUrl          String?  @map("public_url")
  privateUrl         String?  @map("private_url")
  subscriptionsCount BigInt   @default(0) @map("subscritions_count")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  owner         User                @relation(fields: [ownerId], references: [id])
  messages      MessageGroup[]
  subscriptions GroupSubscription[]

  @@index([ownerId])
  @@index([type])
  @@index([createdAt])
  @@index([title])
  @@map("group")
}

model ChannelChat {
  id                 String   @id @default(uuid())
  ownerId            String   @map("owner_id")
  subscriptionsCount BigInt   @default(0) @map("subscritions_count")
  type               ChatType @default(channel)
  title              String?
  description        String?
  publicUrl          String?  @map("public_url")
  privateUrl         String?  @map("private_url")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  owner         User                  @relation(fields: [ownerId], references: [id])
  messages      MessageChannel[]
  subscriptions ChannelSubscription[]

  @@index([ownerId])
  @@index([type])
  @@index([createdAt])
  @@index([title])
  @@map("channel")
}

model UserChat {
  id        String   @id @default(uuid())
  user1Id   String   @map("user_1_id")
  user2Id   String   @map("user_2_id")
  type      ChatType @default(user)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user1    User              @relation("UserChat1", fields: [user1Id], references: [id])
  user2    User              @relation("UserChat2", fields: [user2Id], references: [id])
  messages MessageUserChat[]

  @@index([user1Id])
  @@index([user2Id])
  @@index([user1Id, user2Id])
  @@index([type])
  @@map("user")
}

model MessageChannel {
  id       String  @id @default(uuid())
  chatId   String  @map("chat_id")
  replayId String? @map("replay_id")

  senderId String  @map("sender_id")
  text     String?
  images   Json?
  videos   Json?
  docs     Json?
  files    Json?
  stickers Json?   @map("stikers")

  isUpdated Boolean  @default(false) @map("is_updated")
  isReading Boolean  @default(false) @map("is_reading")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  chat    ChannelChat      @relation(fields: [chatId], references: [id])
  replyTo MessageChannel?  @relation("ChannelReply", fields: [replayId], references: [id])
  replies MessageChannel[] @relation("ChannelReply")
  sender  User             @relation(fields: [senderId], references: [id])

  @@index([chatId])
  @@index([replayId])
  @@index([senderId])
  @@map("messages_channel")
}

model MessageGroup {
  id       String  @id @default(uuid())
  chatId   String  @map("chat_id")
  replayId String? @map("replay_id")

  senderId String  @map("sender_id")
  text     String?
  images   Json?
  videos   Json?
  docs     Json?
  files    Json?
  stickers Json?   @map("stikers")

  isUpdated Boolean  @default(false) @map("is_updated")
  isReading Boolean  @default(false) @map("is_reading")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  chat    GroupChat      @relation(fields: [chatId], references: [id])
  replyTo MessageGroup?  @relation("GroupReply", fields: [replayId], references: [id])
  replies MessageGroup[] @relation("GroupReply")
  sender  User           @relation(fields: [senderId], references: [id])

  @@index([chatId])
  @@index([replayId])
  @@index([senderId])
  @@map("messages_group")
}

model MessageUserChat {
  id       String  @id @default(uuid())
  chatId   String  @map("chat_id")
  replayId String? @map("replay_id")

  senderId String  @map("sender_id")
  text     String?
  images   Json?
  videos   Json?
  docs     Json?
  files    Json?
  stickers Json?   @map("stikers")

  isUpdated Boolean  @default(false) @map("is_updated")
  isReading Boolean  @default(false) @map("is_reading")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  chat    UserChat          @relation(fields: [chatId], references: [id])
  replyTo MessageUserChat?  @relation("UserChatReply", fields: [replayId], references: [id])
  replies MessageUserChat[] @relation("UserChatReply")
  sender  User              @relation(fields: [senderId], references: [id])

  @@index([chatId])
  @@index([replayId])
  @@index([senderId])
  @@map("messages_user")
}

model BotDetails {
  id       String @id @default(uuid())
  parentId String @map("parrent_id")
  ownerId  String @map("owner_id")

  parent User @relation("BotParent", fields: [parentId], references: [id])
  owner  User @relation("BotOwner", fields: [ownerId], references: [id])

  @@map("bot_detailes")
}

model ChannelSubscription {
  id           String  @id @default(uuid())
  chatId       String  @map("chat_id")
  subscriberId String  @map("subscriber_id")
  isWrite      Boolean @default(false)

  chat       ChannelChat @relation(fields: [chatId], references: [id])
  subscriber User        @relation(fields: [subscriberId], references: [id])

  @@index([chatId])
  @@index([subscriberId])
  @@index([chatId, subscriberId])
  @@map("channel_subscribtions")
}

model GroupSubscription {
  id           String @id @default(uuid())
  chatId       String @map("chat_id")
  subscriberId String @map("subscriber_id")

  chat       GroupChat @relation(fields: [chatId], references: [id])
  subscriber User      @relation(fields: [subscriberId], references: [id])

  @@index([chatId])
  @@index([subscriberId])
  @@index([chatId, subscriberId])
  @@map("group_subscribtions")
}

model BotSubscription {
  id           String @id @default(uuid())
  botId        String @map("bot_id")
  subscriberId String @map("subscriber_id")

  subscriber User   @relation(fields: [subscriberId], references: [id])
  userId     String

  @@index([botId])
  @@index([subscriberId])
  @@index([botId, subscriberId])
  @@map("bot_subscribtions")
}
